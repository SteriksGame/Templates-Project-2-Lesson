//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""a65e4bdb-e29f-440c-817f-cf36bb706ca3"",
            ""actions"": [
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""087f16ef-5e34-4766-b1f1-4d0b2905ce95"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""eace3e9d-d9cd-41a9-acaa-11f3c587745f"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Characteristic"",
            ""id"": ""28e2fcb5-72dc-460c-a3f0-9dd6bd89fd14"",
            ""actions"": [
                {
                    ""name"": ""HealAdd"",
                    ""type"": ""Button"",
                    ""id"": ""22f1b3ea-5b76-4aa8-8fa0-6be8542a1a36"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HealReduce"",
                    ""type"": ""Button"",
                    ""id"": ""ce760b7e-295a-4fd5-8692-30ed32992e51"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LevelAdd"",
                    ""type"": ""Button"",
                    ""id"": ""15fc7bc4-b427-491b-a66c-59fbb8c07e8b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LevelReduce"",
                    ""type"": ""Button"",
                    ""id"": ""5f744ae9-8c25-4143-ad45-6f0592484a3d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dbd784b2-5470-4992-9025-7a4a53c4f74f"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HealAdd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b89fe11-6773-42a0-b413-e58727eaddc1"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HealReduce"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49df862c-d596-49ce-855d-73ff429c40ce"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LevelAdd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe4351e9-34be-466f-913d-83c7691da9e4"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LevelReduce"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Boost = m_Movement.FindAction("Boost", throwIfNotFound: true);
        // Characteristic
        m_Characteristic = asset.FindActionMap("Characteristic", throwIfNotFound: true);
        m_Characteristic_HealAdd = m_Characteristic.FindAction("HealAdd", throwIfNotFound: true);
        m_Characteristic_HealReduce = m_Characteristic.FindAction("HealReduce", throwIfNotFound: true);
        m_Characteristic_LevelAdd = m_Characteristic.FindAction("LevelAdd", throwIfNotFound: true);
        m_Characteristic_LevelReduce = m_Characteristic.FindAction("LevelReduce", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Boost;
    public struct MovementActions
    {
        private @PlayerInput m_Wrapper;
        public MovementActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Boost => m_Wrapper.m_Movement_Boost;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Boost.started += instance.OnBoost;
            @Boost.performed += instance.OnBoost;
            @Boost.canceled += instance.OnBoost;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Boost.started -= instance.OnBoost;
            @Boost.performed -= instance.OnBoost;
            @Boost.canceled -= instance.OnBoost;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Characteristic
    private readonly InputActionMap m_Characteristic;
    private List<ICharacteristicActions> m_CharacteristicActionsCallbackInterfaces = new List<ICharacteristicActions>();
    private readonly InputAction m_Characteristic_HealAdd;
    private readonly InputAction m_Characteristic_HealReduce;
    private readonly InputAction m_Characteristic_LevelAdd;
    private readonly InputAction m_Characteristic_LevelReduce;
    public struct CharacteristicActions
    {
        private @PlayerInput m_Wrapper;
        public CharacteristicActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @HealAdd => m_Wrapper.m_Characteristic_HealAdd;
        public InputAction @HealReduce => m_Wrapper.m_Characteristic_HealReduce;
        public InputAction @LevelAdd => m_Wrapper.m_Characteristic_LevelAdd;
        public InputAction @LevelReduce => m_Wrapper.m_Characteristic_LevelReduce;
        public InputActionMap Get() { return m_Wrapper.m_Characteristic; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacteristicActions set) { return set.Get(); }
        public void AddCallbacks(ICharacteristicActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacteristicActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacteristicActionsCallbackInterfaces.Add(instance);
            @HealAdd.started += instance.OnHealAdd;
            @HealAdd.performed += instance.OnHealAdd;
            @HealAdd.canceled += instance.OnHealAdd;
            @HealReduce.started += instance.OnHealReduce;
            @HealReduce.performed += instance.OnHealReduce;
            @HealReduce.canceled += instance.OnHealReduce;
            @LevelAdd.started += instance.OnLevelAdd;
            @LevelAdd.performed += instance.OnLevelAdd;
            @LevelAdd.canceled += instance.OnLevelAdd;
            @LevelReduce.started += instance.OnLevelReduce;
            @LevelReduce.performed += instance.OnLevelReduce;
            @LevelReduce.canceled += instance.OnLevelReduce;
        }

        private void UnregisterCallbacks(ICharacteristicActions instance)
        {
            @HealAdd.started -= instance.OnHealAdd;
            @HealAdd.performed -= instance.OnHealAdd;
            @HealAdd.canceled -= instance.OnHealAdd;
            @HealReduce.started -= instance.OnHealReduce;
            @HealReduce.performed -= instance.OnHealReduce;
            @HealReduce.canceled -= instance.OnHealReduce;
            @LevelAdd.started -= instance.OnLevelAdd;
            @LevelAdd.performed -= instance.OnLevelAdd;
            @LevelAdd.canceled -= instance.OnLevelAdd;
            @LevelReduce.started -= instance.OnLevelReduce;
            @LevelReduce.performed -= instance.OnLevelReduce;
            @LevelReduce.canceled -= instance.OnLevelReduce;
        }

        public void RemoveCallbacks(ICharacteristicActions instance)
        {
            if (m_Wrapper.m_CharacteristicActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacteristicActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacteristicActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacteristicActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacteristicActions @Characteristic => new CharacteristicActions(this);
    public interface IMovementActions
    {
        void OnBoost(InputAction.CallbackContext context);
    }
    public interface ICharacteristicActions
    {
        void OnHealAdd(InputAction.CallbackContext context);
        void OnHealReduce(InputAction.CallbackContext context);
        void OnLevelAdd(InputAction.CallbackContext context);
        void OnLevelReduce(InputAction.CallbackContext context);
    }
}
